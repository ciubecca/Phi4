computing V 2
computing V 4
k= 1
Full basis size:  1344
g= 1.0
Raw vacuum: -0.269845166264
Total number of tails: 300
Generating high energy basis...
Size of HE basis: 2525525
Filename: /Users/lorenzovitale/Phi4/phi4.py

Line #    Mem usage    Increment   Line Contents
================================================
    91   71.145 MiB    0.000 MiB       @profile
    92                                 def genHEBasis(self, k, basisl, EL, ELp, ELpp):
    93                                     """ Generate a high-energy basis from a set of tails
    94                                     k: parity quantum number
    95                                     basisl: Basis instance containing the set of tails
    96                                     EL: maximal energy of the generated basis for DH2
    97                                     ELpp: maximal energy of the generated basis for DH3
    98                                     """
    99                             
   100   71.145 MiB    0.000 MiB           self.basisl[k] = basisl
   101                             
   102   71.145 MiB    0.000 MiB           self.EL = EL
   103   71.145 MiB    0.000 MiB           self.ELp = ELp
   104   71.145 MiB    0.000 MiB           self.ELpp = ELpp
   105   71.145 MiB    0.000 MiB           Emax = max(EL, ELp, ELpp)
   106                             
   107                                     # Generate all the operators between the selected states and the states
   108                                     # in the range [0, Emax]
   109   89.617 MiB   18.473 MiB           Vlist = V4OpsSelectedFull(basisl, Emax)
   110   89.617 MiB    0.000 MiB           vectorset = set()
   111                             
   112 1256.789 MiB 1167.172 MiB           for V in Vlist:
   113 1271.754 MiB   14.965 MiB               for v in V.yieldBasis(basisl, Emax):
   114                                             # Don't add twice states connected by parity inversion
   115 1271.758 MiB    0.004 MiB                   if v not in vectorset and v[::-1] not in vectorset:
   116 1271.465 MiB   -0.293 MiB                       vectorset.add(v)
   117                                                 # print(type(v[1]))
   118                                                 # print(sizeof(v[1]))
   119                             
   120  752.555 MiB -518.910 MiB           helper = Vlist[0].helper
   121                             
   122                                     # Basis of selected states with energy <= Emax
   123 3480.441 MiB 2727.887 MiB           self.basisH[k] = Basis(k, (helper.torepr1(v) for v in vectorset), helper)


Filename: genbasis.py

Line #    Mem usage    Increment   Line Contents
================================================
    39   60.820 MiB    0.000 MiB   @profile
    40                             def main():
    41                             
    42   60.828 MiB    0.008 MiB       a = phi4.Phi4(m, L)
    43   61.590 MiB    0.762 MiB       a.buildBasis(Emax=ET)
    44                             
    45                             
    46 2919.469 MiB 2857.879 MiB       for k in klist:
    47                             
    48                                     # Compute the potential matrices in the low-energy space below ET
    49   69.199 MiB -2850.270 MiB           a.computePotential(k)
    50                             
    51   69.199 MiB    0.000 MiB           print("k=", k)
    52   69.199 MiB    0.000 MiB           print("Full basis size: ", a.basis[k].size)
    53                             
    54   69.199 MiB    0.000 MiB           a.setCouplings(g4=g)
    55   69.199 MiB    0.000 MiB           print("g=", g)
    56                             
    57                             
    58                             # Compute the raw eigenvalues for cutoff ET
    59   71.113 MiB    1.914 MiB           a.computeEigval(k, ET, "raw", neigs=neigs)
    60   71.137 MiB    0.023 MiB           print("Raw vacuum:", a.eigenvalues["raw"][k][0])
    61   71.137 MiB    0.000 MiB           eps = a.eigenvalues["raw"][k][0]
    62                             
    63                             
    64                             
    65                                     # Select a set of tails and construct a Basis object
    66   71.145 MiB    0.008 MiB           vectorlist = [state for i,state in sorted(enumerate(a.basis[k]), key=lambda x:
    67   71.145 MiB    0.000 MiB                   -abs(a.eigenvectors["raw"][k][0][x[0]]))][:maxntails]
    68   71.145 MiB    0.000 MiB           basisl = statefuncs.Basis(k, vectorlist, a.basis[k].helper)
    69   71.145 MiB    0.000 MiB           print("Total number of tails:", basisl.size)
    70                             
    71                             
    72   71.145 MiB    0.000 MiB           print("Generating high energy basis...")
    73                                     # Generate the high-energy "selected" basis by passing a set of tails
    74                                     # and a maximum cutoff EL
    75 2919.367 MiB 2848.223 MiB           a.genHEBasis(k, basisl, EL=EL, ELp=ELp, ELpp=ELpp)
    76 2919.461 MiB    0.094 MiB           print("Size of HE basis:", a.basisH[k].size)


