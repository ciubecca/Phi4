computing V 2
computing V 4
k= 1
Full basis size:  1344
g= 1.0
Raw vacuum: -0.269845166264
Total number of tails: 300
Generating high energy basis...
type of data in statevec: <class 'int'>
type of data in tuples <class 'int'>
type of data in statevec: <class 'int'>
type of data in tuples <class 'int'>
type of data in statevec: <class 'int'>
type of data in tuples <class 'int'>
type of data in statevec: <class 'int'>
type of data in tuples <class 'int'>
type of data in statevec: <class 'int'>
type of data in tuples <class 'int'>
Size of HE basis: 2525525
Filename: /Users/lorenzovitale/Phi4/oscillators.py

Line #    Mem usage    Increment   Line Contents
================================================
   286 2323.145 MiB    0.000 MiB       @profile
   287                                 def genBasis(self, basis, EL):
   288                                     """ Return a set of tuples of representation 2 states, all of which are not
   289                                     connected by spatial parity transformations.
   290                                     basis: set of "selected" low energy states on which to act
   291                                     EL: maximal energy of the generated high-energy states
   292                                     """
   293                             
   294 2323.145 MiB    0.000 MiB           nmax = self.helper.nmax
   295 2323.145 MiB    0.000 MiB           stateset = set()
   296                             
   297 2323.355 MiB    0.211 MiB           for i, state in enumerate(basis):
   298                             
   299 2323.355 MiB    0.000 MiB               statevec = self.helper.torepr2(state)
   300 2323.355 MiB    0.000 MiB               e = basis.energyList[i]
   301                             
   302 2323.355 MiB    0.000 MiB               for dlist in gendlists(state, self.nd, self.nd+self.nc, nmax):
   303 2323.355 MiB    0.000 MiB                   k = self.dlistPos[dlist]
   304                             
   305 2323.355 MiB    0.000 MiB                   imax = bisect.bisect_left(self.oscEnergies[k], EL-e+tol)
   306                             
   307 2323.355 MiB    0.000 MiB                   for i, osc in enumerate(self.oscList[k][:imax]):
   308 2323.355 MiB    0.000 MiB                       newstatevec = statevec[:]
   309 2323.355 MiB    0.000 MiB                       for n,Zc,Zd in osc:
   310 2323.355 MiB    0.000 MiB                           newstatevec[n+nmax] += Zc-Zd
   311 2323.355 MiB    0.000 MiB                       t1 = tuple(newstatevec)
   312 2323.355 MiB    0.000 MiB                       t2 = tuple(newstatevec[::-1])
   313 2323.355 MiB    0.000 MiB                       if (t1 not in stateset) and (t2 not in stateset):
   314 2323.340 MiB   -0.016 MiB                           stateset.add(t1)
   315                             
   316 2323.355 MiB    0.016 MiB           print("type of data in statevec:", type(statevec[0]))
   317 2323.355 MiB    0.000 MiB           print("type of data in tuples", type(t1[0]))
   318                             
   319                             
   320 2323.355 MiB    0.000 MiB           return stateset


Filename: /Users/lorenzovitale/Phi4/phi4.py

Line #    Mem usage    Increment   Line Contents
================================================
    91   71.266 MiB    0.000 MiB       @profile
    92                                 def genHEBasis(self, k, basisl, EL, ELp, ELpp):
    93                                     """ Generate a high-energy basis from a set of tails
    94                                     k: parity quantum number
    95                                     basisl: Basis instance containing the set of tails
    96                                     EL: maximal energy of the generated basis for DH2
    97                                     ELpp: maximal energy of the generated basis for DH3
    98                                     """
    99                             
   100   71.266 MiB    0.000 MiB           self.basisl[k] = basisl
   101                             
   102   71.266 MiB    0.000 MiB           self.EL = EL
   103   71.266 MiB    0.000 MiB           self.ELp = ELp
   104   71.266 MiB    0.000 MiB           self.ELpp = ELpp
   105   71.266 MiB    0.000 MiB           Emax = max(EL, ELp, ELpp)
   106                             
   107                                     # Generate all the operators between the selected states and the states
   108                                     # in the range [0, Emax]
   109   89.703 MiB   18.438 MiB           Vlist = V4OpsSelectedFull(basisl, Emax)
   110   89.703 MiB    0.000 MiB           vectorset = set()
   111                             
   112 2323.355 MiB 2233.652 MiB           for V in Vlist:
   113 2323.355 MiB    0.000 MiB               for v in V.genBasis(basisl, Emax):
   114                                             # Don't add twice states connected by parity inversion
   115 2323.355 MiB    0.000 MiB                   if v not in vectorset and v[::-1] not in vectorset:
   116 2323.355 MiB    0.000 MiB                       vectorset.add(v)
   117                                                 # print(type(v[1]))
   118                                                 # print(sizeof(v[1]))
   119                             
   120 2323.359 MiB    0.004 MiB           helper = Vlist[0].helper
   121                             
   122                                     # Basis of selected states with energy <= Emax
   123 3439.621 MiB 1116.262 MiB           self.basisH[k] = Basis(k, (helper.torepr1(v) for v in vectorset), helper)


