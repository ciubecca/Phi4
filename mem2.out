EL/ET: 3
ELp/ET: 1.5
ELpp/ELp 1.5
Size of stateList in MB: 0.11532
Size of statePos in MB: 1.57296
Size of stateList in MB: 0.115936
Size of statePos in MB: 1.57296
k= 1
Full basis size:  12870
self.V[k][2] MB: 0.623008
self.V[k][4] MB: 15.333736
Size of stateList in MB: 0.115936
Size of statePos in MB: 1.57296
Hraw MB: 15.333736
Size of stateList in MB: 0.001008
Size of statePos in MB: 0.00624
ntails: 100
Generating high energy basis for highest Emax...
Size of set of vectors for HE basis (MB): 33.554656
Size of stateList in MB: 8.353656
Size of statePos in MB: 100.663392
Size of set of vectors for HE basis (MB): 8.388832
Size of stateList in MB: 2.959064
Size of statePos in MB: 25.16592
Size of HE basis for DH2: 928172
Size of HE basis for DH3: 328773
Filename: /Users/lorenzovitale/Phi4/statefuncs.py

Line #    Mem usage    Increment   Line Contents
================================================
    81 1912.469 MiB    0.000 MiB       @profile
    82                                 def __init__(self, k, stateset, helper, orderEnergy=True):
    83                                     """ Standard constructor
    84                                     k: parity quantum number
    85                                     stateset: set or list of states in representation 1
    86                                     helper: Helper object
    87                                     """
    88 1912.469 MiB    0.000 MiB           self.k = k
    89 1912.469 MiB    0.000 MiB           self.helper = helper
    90 1912.469 MiB    0.000 MiB           energy = helper.energy
    91                             
    92 1912.469 MiB    0.000 MiB           self.orderEnergy = orderEnergy
    93                                     # Order the states in energy
    94 1912.469 MiB    0.000 MiB           if orderEnergy:
    95 3331.293 MiB 1418.824 MiB               self.stateList = list(sorted(stateset, key=energy))
    96                                     else:
    97  164.012 MiB -3167.281 MiB               self.stateList = list(stateset)
    98 3331.293 MiB 3167.281 MiB           print("Size of stateList in MB:", sizeof(self.stateList)/10**6)
    99 3331.293 MiB    0.000 MiB           self.size = len(self.stateList)
   100                             
   101 3335.461 MiB    4.168 MiB           self.energyList = [energy(state) for state in self.stateList]
   102 3335.812 MiB    0.352 MiB           self.occnList = [occn(state) for state in self.stateList]
   103 3311.199 MiB  -24.613 MiB           self.parityList = [int(state==reverse(state)) for state in self.stateList]
   104                             
   105 3311.199 MiB    0.000 MiB           try:
   106 3312.457 MiB    1.258 MiB               self.Emax = max(self.energyList)
   107 3312.457 MiB    0.000 MiB               self.Emin = min(self.energyList)
   108                                     except IndexError:
   109                                         self.Emax = None
   110                                         self.Emin = None
   111                             
   112 3312.461 MiB    0.004 MiB           self.statePos = {}
   113 3341.918 MiB   29.457 MiB           for i,state in enumerate(self.stateList):
   114 3341.918 MiB    0.000 MiB               self.statePos[tuple(helper.torepr2(state))] = i
   115 3341.918 MiB    0.000 MiB               self.statePos[tuple(helper.torepr2(state)[::-1])] = i
   116                             
   117 2922.074 MiB -419.844 MiB           print("Size of statePos in MB:", sizeof(self.statePos)/10**6)


Filename: /Users/lorenzovitale/Phi4/phi4.py

Line #    Mem usage    Increment   Line Contents
================================================
   144  164.012 MiB    0.000 MiB       @profile
   145                                 def genHEBases(self, k, basisl, EL, ELpp):
   146                                     """ Generate a high-energy basis from a set of tails
   147                                     k: parity quantum number
   148                                     basisl: Basis instance containing the set of tails
   149                                     EL: maximal energy of the generated basis
   150                                     """
   151                             
   152  164.012 MiB    0.000 MiB           self.basisl[k] = basisl
   153                             
   154 2922.082 MiB 2758.070 MiB           for Emax,basis in zip((EL, ELpp),(self.basisH, self.basish)):
   155                                         # Generate all the operators between the selected states and the states
   156                                         # in the range [0, EL]
   157                             
   158 2042.133 MiB -879.949 MiB               if Emax == None:
   159                                             basis[k] = None
   160                                             continue
   161                             
   162 1695.297 MiB -346.836 MiB               Vlist = V4OpsSelectedFull(basisl, Emax)
   163 1889.918 MiB  194.621 MiB               vectorset = set()
   164                             
   165 1912.465 MiB   22.547 MiB               for V in Vlist:
   166 1912.465 MiB    0.000 MiB                   for v in V.genBasis(basisl, Emax):
   167                             # Don't add twice states connected by parity inversion
   168 1912.465 MiB    0.000 MiB                       if v not in vectorset and v[::-1] not in vectorset:
   169 1912.465 MiB    0.000 MiB                           vectorset.add(v)
   170                             
   171 1912.465 MiB    0.000 MiB               helper = Vlist[0].helper
   172                             
   173 1912.465 MiB    0.000 MiB               print("Size of set of vectors for HE basis (MB):", sizeof(vectorset)/10**6)
   174                             
   175                                         # Basis of selected states with energy <= Emax
   176 3369.836 MiB 1457.371 MiB               basis[k] = Basis(k, (helper.torepr1(v) for v in vectorset), helper)


