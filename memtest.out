genbasis.py 10 1 12
EL, ELp, ELpp: 36.0 24.0 36.0
computing V 2
computing V 4
k= 1
Full basis size:  309
nmax 9
g= 1.0
Raw vacuum: -0.22930576539
Total number of tails: 309
Generating high energy basis...
Size of HE basis: 357521
nmax of HE basis: 28
Estimated MB size of HE basis in repr2: 163.029576
Computed MB size of HE basis in repr1: 155.456128
Filename: /Users/lorenzovitale/Phi4/phi4.py

Line #    Mem usage    Increment   Line Contents
================================================
    91   63.504 MiB    0.000 MiB       @profile
    92                                 def genHEBasis(self, k, basisl, EL, ELp, ELpp):
    93                                     """ Generate a high-energy basis from a set of tails
    94                                     k: parity quantum number
    95                                     basisl: Basis instance containing the set of tails
    96                                     EL: maximal energy of the generated basis for DH2
    97                                     ELpp: maximal energy of the generated basis for DH3
    98                                     """
    99                             
   100   63.504 MiB    0.000 MiB           self.basisl[k] = basisl
   101                             
   102   63.504 MiB    0.000 MiB           self.EL = EL
   103   63.504 MiB    0.000 MiB           self.ELp = ELp
   104   63.504 MiB    0.000 MiB           self.ELpp = ELpp
   105   63.504 MiB    0.000 MiB           Emax = max(EL, ELp, ELpp)
   106                             
   107                                     # Generate all the operators between the selected states and the states
   108                                     # in the range [0, Emax]
   109   68.945 MiB    5.441 MiB           Vlist = V4OpsSelectedFull(basisl, Emax)
   110   68.945 MiB    0.000 MiB           vectorset = set()
   111                             
   112  132.309 MiB   63.363 MiB           for V in Vlist:
   113  132.309 MiB    0.000 MiB               for v in V.yieldBasis(basisl, Emax):
   114                                             # Don't add twice states connected by parity inversion
   115  132.309 MiB    0.000 MiB                   if v not in vectorset and v[::-1] not in vectorset:
   116  132.289 MiB   -0.020 MiB                       vectorset.add(v)
   117                             
   118  132.309 MiB    0.020 MiB           helper = Vlist[0].helper
   119                             
   120                                     # Basis of selected states with energy <= Emax
   121  392.590 MiB  260.281 MiB           self.basisH[k] = Basis(k, (helper.torepr1(v) for v in vectorset), helper)


genbasis.py 10 1 12
EL, ELp, ELpp: 36.0 24.0 36.0
computing V 2
computing V 4
k= 1
Full basis size:  309
nmax 9
g= 1.0
Raw vacuum: -0.22930576539
Total number of tails: 309
Generating high energy basis...
Filename: /Users/lorenzovitale/Phi4/phi4.py

Line #    Mem usage    Increment   Line Contents
================================================
    91   63.578 MiB    0.000 MiB       @profile
    92                                 def genHEBasis(self, k, basisl, EL, ELp, ELpp):
    93                                     """ Generate a high-energy basis from a set of tails
    94                                     k: parity quantum number
    95                                     basisl: Basis instance containing the set of tails
    96                                     EL: maximal energy of the generated basis for DH2
    97                                     ELpp: maximal energy of the generated basis for DH3
    98                                     """
    99                             
   100   63.578 MiB    0.000 MiB           self.basisl[k] = basisl
   101                             
   102   63.578 MiB    0.000 MiB           self.EL = EL
   103   63.578 MiB    0.000 MiB           self.ELp = ELp
   104   63.578 MiB    0.000 MiB           self.ELpp = ELpp
   105   63.578 MiB    0.000 MiB           Emax = max(EL, ELp, ELpp)
   106                             
   107                                     # Generate all the operators between the selected states and the states
   108                                     # in the range [0, Emax]
   109   68.992 MiB    5.414 MiB           Vlist = V4OpsSelectedFull(basisl, Emax)
   110   68.992 MiB    0.000 MiB           vectorset = set()
   111                             
   112  132.359 MiB   63.367 MiB           for V in Vlist:
   113  132.359 MiB    0.000 MiB               for v in V.yieldBasis(basisl, Emax):
   114                                             # Don't add twice states connected by parity inversion
   115  132.359 MiB    0.000 MiB                   if v not in vectorset and v[::-1] not in vectorset:
   116  132.340 MiB   -0.020 MiB                       vectorset.add(v)
   117                             
   118  132.359 MiB    0.020 MiB           helper = Vlist[0].helper
   119                             
   120                                     # Basis of selected states with energy <= Emax
   121  397.320 MiB  264.961 MiB           self.basisH[k] = Basis(k, (helper.torepr1(v) for v in vectorset), helper)


genbasis.py 10 1 12
EL, ELp, ELpp: 36.0 24.0 36.0
computing V 2
computing V 4
k= 1
Full basis size:  309
nmax 9
g= 1.0
Raw vacuum: -0.22930576539
Total number of tails: 309
Generating high energy basis...
Size of HE basis: 357521
nmax of HE basis: 28
Estimated MB size of HE basis in repr2: 163.029576
Computed MB size of HE basis in repr1: 155.456128
Filename: /Users/lorenzovitale/Phi4/phi4.py

Line #    Mem usage    Increment   Line Contents
================================================
    91   63.793 MiB    0.000 MiB       @profile
    92                                 def genHEBasis(self, k, basisl, EL, ELp, ELpp):
    93                                     """ Generate a high-energy basis from a set of tails
    94                                     k: parity quantum number
    95                                     basisl: Basis instance containing the set of tails
    96                                     EL: maximal energy of the generated basis for DH2
    97                                     ELpp: maximal energy of the generated basis for DH3
    98                                     """
    99                             
   100   63.793 MiB    0.000 MiB           self.basisl[k] = basisl
   101                             
   102   63.793 MiB    0.000 MiB           self.EL = EL
   103   63.793 MiB    0.000 MiB           self.ELp = ELp
   104   63.793 MiB    0.000 MiB           self.ELpp = ELpp
   105   63.793 MiB    0.000 MiB           Emax = max(EL, ELp, ELpp)
   106                             
   107                                     # Generate all the operators between the selected states and the states
   108                                     # in the range [0, Emax]
   109   69.191 MiB    5.398 MiB           Vlist = V4OpsSelectedFull(basisl, Emax)
   110   69.191 MiB    0.000 MiB           vectorset = set()
   111                             
   112  132.582 MiB   63.391 MiB           for V in Vlist:
   113  132.582 MiB    0.000 MiB               for v in V.yieldBasis(basisl, Emax):
   114                                             # Don't add twice states connected by parity inversion
   115  132.582 MiB    0.000 MiB                   if v not in vectorset and v[::-1] not in vectorset:
   116  132.562 MiB   -0.020 MiB                       vectorset.add(v)
   117                             
   118  132.582 MiB    0.020 MiB           helper = Vlist[0].helper
   119                             
   120                                     # Basis of selected states with energy <= Emax
   121  386.977 MiB  254.395 MiB           self.basisH[k] = Basis(k, (helper.torepr1(v) for v in vectorset), helper)


genbasis.py 10 1 12
EL, ELp, ELpp: 36.0 24.0 36.0
computing V 2
computing V 4
k= 1
Full basis size:  309
nmax 9
g= 1.0
Raw vacuum: -0.22930576539
Total number of tails: 309
Generating high energy basis...
Size of HE basis: 357521
Filename: /Users/lorenzovitale/Phi4/phi4.py

Line #    Mem usage    Increment   Line Contents
================================================
    92   63.691 MiB    0.000 MiB       @profile
    93                                 def genHEBasis(self, k, basisl, EL, ELp, ELpp):
    94                                     """ Generate a high-energy basis from a set of tails
    95                                     k: parity quantum number
    96                                     basisl: Basis instance containing the set of tails
    97                                     EL: maximal energy of the generated basis for DH2
    98                                     ELpp: maximal energy of the generated basis for DH3
    99                                     """
   100                             
   101   63.691 MiB    0.000 MiB           self.basisl[k] = basisl
   102                             
   103   63.691 MiB    0.000 MiB           self.EL = EL
   104   63.691 MiB    0.000 MiB           self.ELp = ELp
   105   63.691 MiB    0.000 MiB           self.ELpp = ELpp
   106   63.691 MiB    0.000 MiB           Emax = max(EL, ELp, ELpp)
   107                             
   108                                     # Generate all the operators between the selected states and the states
   109                                     # in the range [0, Emax]
   110   69.082 MiB    5.391 MiB           Vlist = V4OpsSelectedFull(basisl, Emax)
   111   69.082 MiB    0.000 MiB           vectorset = set()
   112                             
   113  132.457 MiB   63.375 MiB           for V in Vlist:
   114  132.457 MiB    0.000 MiB               for v in V.yieldBasis(basisl, Emax):
   115                                             # Don't add twice states connected by parity inversion
   116  132.457 MiB    0.000 MiB                   if v not in vectorset and v[::-1] not in vectorset:
   117  132.434 MiB   -0.023 MiB                       vectorset.add(v)
   118                             
   119  132.457 MiB    0.023 MiB           helper = Vlist[0].helper
   120                             
   121                                     # Basis of selected states with energy <= Emax
   122  392.578 MiB  260.121 MiB           self.basisH[k] = Basis(k, (helper.torepr1(v) for v in vectorset), helper)


Filename: genbasis.py

Line #    Mem usage    Increment   Line Contents
================================================
    40   61.012 MiB    0.000 MiB   @profile
    41                             def main():
    42                             
    43   61.027 MiB    0.016 MiB       a = phi4.Phi4(m, L)
    44   61.156 MiB    0.129 MiB       a.buildBasis(Emax=ET)
    45                             
    46                             
    47   61.156 MiB    0.000 MiB       for k in klist:
    48                             
    49                                     # Compute the potential matrices in the low-energy space below ET
    50   63.367 MiB    2.211 MiB           a.computePotential(k)
    51                             
    52   63.367 MiB    0.000 MiB           print("k=", k)
    53   63.367 MiB    0.000 MiB           print("Full basis size: ", a.basis[k].size)
    54                             
    55   63.367 MiB    0.000 MiB           print("nmax", a.basis[k].nmax)
    56                             
    57   63.367 MiB    0.000 MiB           a.setCouplings(g4=g)
    58   63.367 MiB    0.000 MiB           print("g=", g)
    59                             
    60                             
    61                             # Compute the raw eigenvalues for cutoff ET
    62   63.668 MiB    0.301 MiB           a.computeEigval(k, ET, "raw", neigs=neigs)
    63   63.691 MiB    0.023 MiB           print("Raw vacuum:", a.eigenvalues["raw"][k][0])
    64   63.691 MiB    0.000 MiB           eps = a.eigenvalues["raw"][k][0]
    65                             
    66                             
    67                             
    68                                     # Select a set of tails and construct a Basis object
    69   63.691 MiB    0.000 MiB           vectorlist = [state for i,state in sorted(enumerate(a.basis[k]), key=lambda x:
    70   63.691 MiB    0.000 MiB                   -abs(a.eigenvectors["raw"][k][0][x[0]]))]
    71   63.691 MiB    0.000 MiB           if maxntails != None:
    72                                         vectorlist = vectorlist[:maxntails]
    73   63.691 MiB    0.000 MiB           basisl = statefuncs.Basis(k, vectorlist, a.basis[k].helper)
    74   63.691 MiB    0.000 MiB           print("Total number of tails:", basisl.size)
    75                             
    76                             
    77   63.691 MiB    0.000 MiB           print("Generating high energy basis...")
    78                                     # Generate the high-energy "selected" basis by passing a set of tails
    79                                     # and a maximum cutoff EL
    80  357.078 MiB  293.387 MiB           a.genHEBasis(k, basisl, EL=EL, ELp=ELp, ELpp=ELpp)
    81  357.078 MiB    0.000 MiB           print("Size of HE basis:", a.basisH[k].size)
    82                             
    83  357.078 MiB    0.000 MiB           gc.collect()
    84                             
    85                                     HEnmax = a.basisH[k].nmax
    86                                     print("nmax of HE basis:", HEnmax)
    87                                     print("Estimated MB size of HE basis in repr2:",
    88                                             8*(HEnmax*2+1)*a.basisH[k].size/10**6)
    89                                     print("Computed MB size of HE basis in repr1:", a.basisH[k].MBsize())


genbasis.py 10 1 12
EL, ELp, ELpp: 36.0 24.0 36.0
computing V 2
computing V 4
k= 1
Full basis size:  309
nmax 9
g= 1.0
Raw vacuum: -0.22930576539
Total number of tails: 309
Generating high energy basis...
Size of HE basis: 357521
nmax of HE basis: 28
Estimated MB size of HE basis in repr2: 163.029576
Computed MB size of HE basis in repr1: 155.456128
Filename: /Users/lorenzovitale/Phi4/phi4.py

Line #    Mem usage    Increment   Line Contents
================================================
    92   64.008 MiB    0.000 MiB       @profile
    93                                 def genHEBasis(self, k, basisl, EL, ELp, ELpp):
    94                                     """ Generate a high-energy basis from a set of tails
    95                                     k: parity quantum number
    96                                     basisl: Basis instance containing the set of tails
    97                                     EL: maximal energy of the generated basis for DH2
    98                                     ELpp: maximal energy of the generated basis for DH3
    99                                     """
   100                             
   101   64.008 MiB    0.000 MiB           self.basisl[k] = basisl
   102                             
   103   64.008 MiB    0.000 MiB           self.EL = EL
   104   64.008 MiB    0.000 MiB           self.ELp = ELp
   105   64.008 MiB    0.000 MiB           self.ELpp = ELpp
   106   64.008 MiB    0.000 MiB           Emax = max(EL, ELp, ELpp)
   107                             
   108                                     # Generate all the operators between the selected states and the states
   109                                     # in the range [0, Emax]
   110   69.371 MiB    5.363 MiB           Vlist = V4OpsSelectedFull(basisl, Emax)
   111   69.371 MiB    0.000 MiB           vectorset = set()
   112                             
   113  132.742 MiB   63.371 MiB           for V in Vlist:
   114  132.742 MiB    0.000 MiB               for v in V.yieldBasis(basisl, Emax):
   115                                             # Don't add twice states connected by parity inversion
   116  132.742 MiB    0.000 MiB                   if v not in vectorset and v[::-1] not in vectorset:
   117  132.719 MiB   -0.023 MiB                       vectorset.add(v)
   118                             
   119  132.742 MiB    0.023 MiB           helper = Vlist[0].helper
   120                             
   121                                     # Basis of selected states with energy <= Emax
   122  392.855 MiB  260.113 MiB           self.basisH[k] = Basis(k, (helper.torepr1(v) for v in vectorset), helper)


Filename: genbasis.py

Line #    Mem usage    Increment   Line Contents
================================================
    41   61.039 MiB    0.000 MiB   @profile
    42                             def main():
    43                             
    44   61.051 MiB    0.012 MiB       a = phi4.Phi4(m, L)
    45   61.184 MiB    0.133 MiB       a.buildBasis(Emax=ET)
    46                             
    47                             
    48  362.457 MiB  301.273 MiB       for k in klist:
    49                             
    50                                     # Compute the potential matrices in the low-energy space below ET
    51   63.480 MiB -298.977 MiB           a.computePotential(k)
    52                             
    53   63.480 MiB    0.000 MiB           print("k=", k)
    54   63.480 MiB    0.000 MiB           print("Full basis size: ", a.basis[k].size)
    55                             
    56   63.480 MiB    0.000 MiB           print("nmax", a.basis[k].nmax)
    57                             
    58   63.480 MiB    0.000 MiB           a.setCouplings(g4=g)
    59   63.480 MiB    0.000 MiB           print("g=", g)
    60                             
    61                             
    62                             # Compute the raw eigenvalues for cutoff ET
    63   63.984 MiB    0.504 MiB           a.computeEigval(k, ET, "raw", neigs=neigs)
    64   64.008 MiB    0.023 MiB           print("Raw vacuum:", a.eigenvalues["raw"][k][0])
    65   64.008 MiB    0.000 MiB           eps = a.eigenvalues["raw"][k][0]
    66                             
    67                             
    68                             
    69                                     # Select a set of tails and construct a Basis object
    70   64.008 MiB    0.000 MiB           vectorlist = [state for i,state in sorted(enumerate(a.basis[k]), key=lambda x:
    71   64.008 MiB    0.000 MiB                   -abs(a.eigenvectors["raw"][k][0][x[0]]))]
    72   64.008 MiB    0.000 MiB           if maxntails != None:
    73                                         vectorlist = vectorlist[:maxntails]
    74   64.008 MiB    0.000 MiB           basisl = statefuncs.Basis(k, vectorlist, a.basis[k].helper)
    75   64.008 MiB    0.000 MiB           print("Total number of tails:", basisl.size)
    76                             
    77                             
    78   64.008 MiB    0.000 MiB           print("Generating high energy basis...")
    79                                     # Generate the high-energy "selected" basis by passing a set of tails
    80                                     # and a maximum cutoff EL
    81  357.605 MiB  293.598 MiB           a.genHEBasis(k, basisl, EL=EL, ELp=ELp, ELpp=ELpp)
    82  357.605 MiB    0.000 MiB           print("Size of HE basis:", a.basisH[k].size)
    83                             
    84  362.457 MiB    4.852 MiB           gc.collect()
    85                             
    86  362.457 MiB    0.000 MiB           HEnmax = a.basisH[k].nmax
    87  362.457 MiB    0.000 MiB           print("nmax of HE basis:", HEnmax)
    88  362.457 MiB    0.000 MiB           print("Estimated MB size of HE basis in repr2:",
    89  362.457 MiB    0.000 MiB                   8*(HEnmax*2+1)*a.basisH[k].size/10**6)
    90  362.457 MiB    0.000 MiB           print("Computed MB size of HE basis in repr1:", a.basisH[k].MBsize())


genbasis.py 10 1 15
EL, ELp, ELpp: 45.0 30.0 45.0
computing V 2
computing V 4
k= 1
Full basis size:  1344
nmax 11
g= 1.0
Raw vacuum: -0.269845166264
Total number of tails: 1344
Generating high energy basis...
Size of HE basis: 3089219
nmax of HE basis: 35
Estimated MB size of HE basis in repr2: 1754.676392
Computed MB size of HE basis in repr1: 1582.695328
Filename: /Users/lorenzovitale/Phi4/phi4.py

Line #    Mem usage    Increment   Line Contents
================================================
    92   70.965 MiB    0.000 MiB       @profile
    93                                 def genHEBasis(self, k, basisl, EL, ELp, ELpp):
    94                                     """ Generate a high-energy basis from a set of tails
    95                                     k: parity quantum number
    96                                     basisl: Basis instance containing the set of tails
    97                                     EL: maximal energy of the generated basis for DH2
    98                                     ELpp: maximal energy of the generated basis for DH3
    99                                     """
   100                             
   101   70.965 MiB    0.000 MiB           self.basisl[k] = basisl
   102                             
   103   70.965 MiB    0.000 MiB           self.EL = EL
   104   70.965 MiB    0.000 MiB           self.ELp = ELp
   105   70.965 MiB    0.000 MiB           self.ELpp = ELpp
   106   70.965 MiB    0.000 MiB           Emax = max(EL, ELp, ELpp)
   107                             
   108                                     # Generate all the operators between the selected states and the states
   109                                     # in the range [0, Emax]
   110   80.812 MiB    9.848 MiB           Vlist = V4OpsSelectedFull(basisl, Emax)
   111   80.812 MiB    0.000 MiB           vectorset = set()
   112                             
   113  651.020 MiB  570.207 MiB           for V in Vlist:
   114  651.020 MiB    0.000 MiB               for v in V.yieldBasis(basisl, Emax):
   115                                             # Don't add twice states connected by parity inversion
   116  651.020 MiB    0.000 MiB                   if v not in vectorset and v[::-1] not in vectorset:
   117  651.004 MiB   -0.016 MiB                       vectorset.add(v)
   118                             
   119  651.020 MiB    0.016 MiB           helper = Vlist[0].helper
   120                             
   121                                     # Basis of selected states with energy <= Emax
   122 2672.863 MiB 2021.844 MiB           self.basisH[k] = Basis(k, (helper.torepr1(v) for v in vectorset), helper)


Filename: genbasis.py

Line #    Mem usage    Increment   Line Contents
================================================
    41   61.156 MiB    0.000 MiB   @profile
    42                             def main():
    43                             
    44   61.168 MiB    0.012 MiB       a = phi4.Phi4(m, L)
    45   61.906 MiB    0.738 MiB       a.buildBasis(Emax=ET)
    46                             
    47                             
    48 2634.270 MiB 2572.363 MiB       for k in klist:
    49                             
    50                                     # Compute the potential matrices in the low-energy space below ET
    51   69.059 MiB -2565.211 MiB           a.computePotential(k)
    52                             
    53   69.059 MiB    0.000 MiB           print("k=", k)
    54   69.059 MiB    0.000 MiB           print("Full basis size: ", a.basis[k].size)
    55                             
    56   69.059 MiB    0.000 MiB           print("nmax", a.basis[k].nmax)
    57                             
    58   69.059 MiB    0.000 MiB           a.setCouplings(g4=g)
    59   69.059 MiB    0.000 MiB           print("g=", g)
    60                             
    61                             
    62                             # Compute the raw eigenvalues for cutoff ET
    63   70.941 MiB    1.883 MiB           a.computeEigval(k, ET, "raw", neigs=neigs)
    64   70.965 MiB    0.023 MiB           print("Raw vacuum:", a.eigenvalues["raw"][k][0])
    65   70.965 MiB    0.000 MiB           eps = a.eigenvalues["raw"][k][0]
    66                             
    67                             
    68                             
    69                                     # Select a set of tails and construct a Basis object
    70   70.965 MiB    0.000 MiB           vectorlist = [state for i,state in sorted(enumerate(a.basis[k]), key=lambda x:
    71   70.965 MiB    0.000 MiB                   -abs(a.eigenvectors["raw"][k][0][x[0]]))]
    72   70.965 MiB    0.000 MiB           if maxntails != None:
    73                                         vectorlist = vectorlist[:maxntails]
    74   70.965 MiB    0.000 MiB           basisl = statefuncs.Basis(k, vectorlist, a.basis[k].helper)
    75   70.965 MiB    0.000 MiB           print("Total number of tails:", basisl.size)
    76                             
    77                             
    78   70.965 MiB    0.000 MiB           print("Generating high energy basis...")
    79                                     # Generate the high-energy "selected" basis by passing a set of tails
    80                                     # and a maximum cutoff EL
    81 2572.461 MiB 2501.496 MiB           a.genHEBasis(k, basisl, EL=EL, ELp=ELp, ELpp=ELpp)
    82 2572.523 MiB    0.062 MiB           print("Size of HE basis:", a.basisH[k].size)
    83                             
    84 2634.266 MiB   61.742 MiB           gc.collect()
    85                             
    86 2634.266 MiB    0.000 MiB           HEnmax = a.basisH[k].nmax
    87 2634.266 MiB    0.000 MiB           print("nmax of HE basis:", HEnmax)
    88 2634.266 MiB    0.000 MiB           print("Estimated MB size of HE basis in repr2:",
    89 2634.266 MiB    0.000 MiB                   8*(HEnmax*2+1)*a.basisH[k].size/10**6)
    90 2634.270 MiB    0.004 MiB           print("Computed MB size of HE basis in repr1:", a.basisH[k].MBsize())


